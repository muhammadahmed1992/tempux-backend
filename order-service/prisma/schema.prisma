generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_ORDER")
  schemas = ["order", "payments", "shipment"]
}

model order {
  id           BigInt          @id @default(autoincrement())
  buyer_id     BigInt          @db.BigInt
  total_amount  Decimal       @db.Decimal(10,2)
  total_tax     Decimal       @db.Decimal(10,2)
  discount      Decimal       @default(0) @db.Decimal(10,2)
  total_commission  Decimal   @db.Decimal(10,2)
  total_shipping_cost Decimal @db.Decimal(10,2)
  order_date    DateTime      @default(now()) @db.Timestamptz(6)
  order_status  String        @default("PENDING") @db.VarChar(15)
  created_at   DateTime        @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?       @db.Timestamptz(6)
  deleted_at   DateTime?       @db.Timestamptz(6)

  created_by   BigInt       @db.BigInt
  updated_by  BigInt?       @db.BigInt
  deleted_by   BigInt?      @db.BigInt

  is_deleted   Boolean      @default(false)
  order_items order_item[] @relation("Order")
  @@schema("order")
}
model order_item {
  id           BigInt          @id @default(autoincrement())
  order_id    BigInt           @db.BigInt
  order order @relation("Order", fields:[order_id], references: [id])
  seller_id     BigInt          @db.BigInt
  product_variant_id  BigInt    @db.BigInt
  quantity      Int             @db.Integer

  price  Decimal       @db.Decimal(10,2)
  tax_amount     Decimal       @db.Decimal(10,2)
  total_price      Decimal      @db.Decimal(10,2)
  commission  Decimal   @db.Decimal(10,2)
  order_item_date    DateTime      @default(now()) @db.Timestamptz(6)
  order_status  String        @default("PENDING") @db.VarChar(15)
  // This is for sellers if their payment is pending.
  payout_status  String        @default("PENDING") @db.VarChar(15)
  escrow_status  String        @default("HELD") @db.VarChar(15)
  created_at   DateTime        @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?       @db.Timestamptz(6)
  deleted_at   DateTime?       @db.Timestamptz(6)

  created_by   BigInt       @db.BigInt
  updated_by  BigInt?       @db.BigInt
  deleted_by   BigInt?      @db.BigInt

  is_deleted   Boolean      @default(false)
  payout_item_links payout_item_link[]
  @@unique([order_id, seller_id, product_variant_id])
  @@schema("order")
}
model shipment_provider {
  id           BigInt          @id @default(autoincrement())
  name         String          @unique @db.VarChar(25)
  base_url    String           @db.VarChar(100)
  shipment_tracking_url String @db.VarChar(500)
  webhook_url   String         @db.VarChar(500)
  created_at   DateTime        @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?       @db.Timestamptz(6)
  deleted_at   DateTime?       @db.Timestamptz(6)

  created_by   BigInt       @db.BigInt
  updated_by  BigInt?       @db.BigInt
  deleted_by   BigInt?      @db.BigInt

  is_deleted   Boolean      @default(false)
  shipmentOrderItem order_item_shipment[] @relation("ShipmentProvider")
  @@schema("shipment")
}
model order_item_shipment {
  id           BigInt          @id @default(autoincrement())
  shipment_id BigInt        @db.BigInt
  shipment shipment_provider  @relation("ShipmentProvider", fields: [shipment_id], references: [id])
  order_item_id BigInt        @db.BigInt
  shipment_cost Decimal       @db.Decimal(10,2)
  shipment_status String       @db.VarChar(20)
  tracking_id   String         @db.VarChar(20)
  created_at   DateTime        @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?       @db.Timestamptz(6)
  deleted_at   DateTime?       @db.Timestamptz(6)

  created_by   BigInt       @db.BigInt
  updated_by  BigInt?       @db.BigInt
  deleted_by   BigInt?      @db.BigInt

  is_deleted   Boolean      @default(false)
  shipmentTracking shipment_tracking[] @relation("OrderItemShipment")
  @@schema("shipment")
}

model shipment_tracking {
  id           BigInt          @id @default(autoincrement())
  item_shipment_id BigInt        @db.BigInt
  item_shipment order_item_shipment @relation("OrderItemShipment", fields: [item_shipment_id], references: [id])
  shipment_status String       @db.VarChar(20)
  raw_api_response Json?        @db.JsonB
  created_at   DateTime        @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?       @db.Timestamptz(6)
  deleted_at   DateTime?       @db.Timestamptz(6)

  created_by   BigInt       @db.BigInt
  updated_by  BigInt?       @db.BigInt
  deleted_by   BigInt?      @db.BigInt

  is_deleted   Boolean      @default(false)
  @@schema("shipment")
}

model payment_method_type {
  id          Int       @id @default(autoincrement())
 // e.g., "Stripe", "Bank Transfer", "Credit Card", "PayPal"
  name        String    @unique @db.VarChar(50)
  description String?   @db.VarChar(255)

  // Inverse relation to payment
  payments    payment[]

  created_at  DateTime  @default(now())
  updated_at  DateTime?
  is_deleted  Boolean   @default(false)

  @@map("payment_method_types")
  @@schema("payments")
}

// NEW: Payment Model (Customer's payment for an Order)
model payment {
  id                   BigInt              @id @default(autoincrement())
  order_id             BigInt              @db.BigInt
  payment_method_type_id Int               @db.Integer
  transaction_id       String              @unique @db.VarChar(255)
  amount               Decimal             @db.Decimal(15,2)
  currency_id          Int                 @db.Integer
  // e.g., PENDING, COMPLETED, FAILED, REFUNDED, CAPTURED, AUTHORIZED
  status               String              @default("PENDING") @db.VarChar(50)
  payment_date         DateTime            @default(now()) @db.Timestamptz(6)
  // Store raw response from gateway if needed for debugging/auditing
  gateway_response     Json?                @db.JsonB

  // Relations
  paymentMethodType    payment_method_type @relation(fields: [payment_method_type_id], references: [id])

  created_at           DateTime            @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @db.Timestamptz(6)
  deleted_at           DateTime?           @db.Timestamptz(6)

  created_by           BigInt              @db.BigInt
  updated_by           BigInt?             @db.BigInt
  deleted_by           BigInt?             @db.BigInt

  is_deleted           Boolean             @default(false)

  @@map("payments")
  @@schema("payments")
}

// NEW: Payout Model (Platform's payout to a Seller)
model payout {
  id                  BigInt            @id @default(autoincrement())
// Who is receiving the payout
  seller_id           BigInt            @db.BigInt
  // Total amount of this payout
  amount              Decimal           @db.Decimal(15,2)
  currency_id         Int               @db.Integer
  status              String            @default("PENDING") @db.VarChar(50) // e.g., PENDING, COMPLETED, FAILED, REVERSED
  payout_date         DateTime          @default(now()) @db.Timestamptz(6)
  // ID from payment processor for this payout (e.g., Stripe Connect payout ID)
  transaction_id      String?           @unique @db.VarChar(255)

  // Items included in this payout (many-to-many via payout_item_link)
  payout_item_links   payout_item_link[]

  created_at          DateTime          @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?         @db.Timestamptz(6)
  deleted_at          DateTime?         @db.Timestamptz(6)

  created_by          BigInt            @db.BigInt
  updated_by          BigInt?           @db.BigInt
  deleted_by          BigInt?           @db.BigInt

  is_deleted          Boolean           @default(false)

  @@map("payouts")
  @@schema("payments")
}

// NEW: Payout Item Link Model (Junction table for Payouts to Order Items)
// This links specific order items that have cleared escrow to a payout.
model payout_item_link {
  id                  BigInt      @id @default(autoincrement())
  payout_id           BigInt      @db.BigInt
  order_item_id       BigInt      @db.BigInt
  // The portion of the order item's funds released in this payout
  amount_released     Decimal     @db.Decimal(15,2)

  // Relations
  payout              payout      @relation(fields: [payout_id], references: [id])
  orderItem           order_item  @relation(fields: [order_item_id], references: [id])

  created_at          DateTime    @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?   @db.Timestamptz(6)
  deleted_at          DateTime?   @db.Timestamptz(6)

  created_by          BigInt      @db.BigInt
  updated_by          BigInt?     @db.BigInt
  deleted_by          BigInt?     @db.BigInt

  is_deleted          Boolean     @default(false)

  // An order item should only be linked to a payout once
  @@unique([payout_id, order_item_id])
  @@map("payout_item_links")
  @@schema("payments")
}

