generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV_USERS")
}

model AccessManagement {
  id           Int       @id @default(autoincrement())
  access       String    @db.VarChar(50)
  description  String?   @db.VarChar(200)
  user_type_id Int       @db.SmallInt
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  is_deleted   Boolean   @default(false)
  user_type    UserType  @relation(fields: [user_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("access_management")
}

model SavedSearch {
  id           BigInt    @id @default(autoincrement())
  user_id      BigInt
  search_query Json
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  is_deleted   Boolean   @default(false)
  user         User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("saved_searches")
}

model SellerProfileDetail {
  id                BigInt    @id @default(autoincrement())
  brand_name        String    @db.VarChar(50)
  brand_description String?   @db.VarChar(100)
  user_id           BigInt
  vat_number        String?   @db.VarChar(15)
  location_from     String?   @db.VarChar(1000)
  is_private        Boolean   @default(true)
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @db.Timestamptz(6)
  is_deleted        Boolean   @default(false)
  user              User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("seller_profile_detail")
}

model SellerProfileRating {
  id               BigInt   @id @default(autoincrement())
  rating_name      String   @db.VarChar(50)
  rating_value     Decimal? @db.Decimal(2, 1)
  seller_id        BigInt?
  reviewed_by      BigInt?
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @db.Timestamptz(6)
  is_deleted       Boolean   @default(false)
  reviewedByUser   User?     @relation("seller_profile_rating_reviewed_byTousers", fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sellerUser       User?     @relation("seller_profile_rating_seller_idTousers", fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("seller_profile_rating")
}

model UserType {
  id             Int              @id @db.SmallInt
  name           String           @unique @db.VarChar(20)
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  is_deleted     Boolean          @default(false)
  access         AccessManagement[]
  users          User[]           @relation("users_user_typeTouser_type")

  @@map("user_type")
}

model User {
  id           BigInt     @id @default(autoincrement())
  name         String     @db.VarChar(100)
  email        String     @db.VarChar(150)
  full_name    String?    @db.VarChar(100)
  password     String     @db.VarChar(150)
  user_type    Int        @db.SmallInt
  telephone    String?    @db.VarChar(15)
  address      String?    @db.VarChar(150)
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime   @default(now()) @db.Timestamptz(6)
  is_deleted   Boolean    @default(false)
  otp          String?    @db.Char(60)
  otp_expires_at DateTime?
  otp_verified Boolean    @default(false)

  googleId     String?    @db.VarChar(400)
  facebookId   String?    @db.VarChar(400)
  onboarded    Boolean    @default(false)

  saved_searches        SavedSearch[]
  seller_profile_detail SellerProfileDetail[]
  reviewedRatings       SellerProfileRating[] @relation("seller_profile_rating_reviewed_byTousers")
  sellerRatings         SellerProfileRating[] @relation("seller_profile_rating_seller_idTousers")
  userType              UserType @relation("users_user_typeTouser_type", fields: [user_type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  isApproved  Boolean   @default(false)
  @@unique([email, user_type], map: "users_email_user_type_unique")
  @@map("users")
}
