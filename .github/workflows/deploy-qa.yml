name: Deploy QA Environment

on:
  push:
    branches:
      - qa

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: SSH Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            PROJECT_DIR=/home/ubuntu/tempux-backend
            export CI=true
            echo "üëâ Pull latest code"
            cd "$PROJECT_DIR" || { echo "Error: Could not change to project directory. Exiting."; exit 1; }

            git reset --hard HEAD
            git clean -df
            git fetch origin
            git checkout qa
            git pull origin qa

            echo "üëâ Ensuring .npm-global/bin is in PATH"
            npm config set prefix '~/.npm-global'
            export PATH="$PATH:$HOME/.npm-global/bin"

            echo "üëâ Stopping and deleting existing PM2 processes..."
            pm2 delete all || true

            cd "$PROJECT_DIR/api-gateway" && npm install && npm run build || { echo "Error: api-gateway failed. Exiting."; exit 1; }
            cd "$PROJECT_DIR/auth-service" && npm install || { echo "Error: auth-service failed. Exiting."; exit 1; }
            cd "$PROJECT_DIR/product-service" && npm install || { echo "Error: product-service failed. Exiting."; exit 1; }
            cd "$PROJECT_DIR"

            ECOSYSTEM_FILE="ecosystem.config.js"
            BACKUP_DIR="/home/ubuntu/pm2_config_backups"
            mkdir -p "$BACKUP_DIR"
            ls -tp "$BACKUP_DIR" | grep -v '/$' | tail -n +6 | xargs -I {} rm -- "$BACKUP_DIR/{}" || true

            sed -i.bak "s#INJECT_JWT_SECRET#${{ secrets.JWT_SECRET }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_OTP_EXPIRY_DURATION#${{ secrets.OTP_EXPIRY_DURATION }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_HOST#${{ secrets.MAIL_HOST }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_PORT#${{ secrets.MAIL_PORT }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_USERNAME#${{ secrets.MAIL_USERNAME }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_PASSWORD#${{ secrets.MAIL_PASSWORD }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_FROM#${{ secrets.MAIL_FROM }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_FRONTEND_URL#${{ secrets.FRONTEND_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_GOOGLE_CLIENT_ID#${{ secrets.GOOGLE_CLIENT_ID }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_GOOGLE_CLIENT_SECRET#${{ secrets.GOOGLE_CLIENT_SECRET }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_GOOGLE_CALLBACK_URL#${{ secrets.GOOGLE_CALLBACK_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_FACEBOOK_APP_ID#${{ secrets.FACEBOOK_APP_ID }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_FACEBOOK_APP_SECRET#${{ secrets.FACEBOOK_APP_SECRET }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_FACEBOOK_CALLBACK_URL#${{ secrets.FACEBOOK_CALLBACK_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_EMAIL_ENCRYPTION_KEY#${{ secrets.EMAIL_ENCRYPTION_KEY }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_SALT_ROUND#${{ secrets.SALT_ROUND }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_AUTH_PORT#${{ secrets.AUTH_PORT }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_USER_SERVICE_URL#${{ secrets.USER_SERVICE_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_AUTH_SERVICE_BASE_URL#${{ secrets.AUTH_SERVICE_BASE_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_PRODUCT_SERVICE_BASE_URL#${{ secrets.PRODUCT_SERVICE_BASE_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_PRODUCT_PORT#${{ secrets.PRODUCT_PORT }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_GATEWAY_PORT#${{ secrets.GATEWAY_PORT }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_DATABASE_URL_DEV_USERS#${{ secrets.DATABASE_URL_DEV_USERS }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_DATABASE_URL_DEV_PRODUCT#${{ secrets.DATABASE_URL_DEV_PRODUCT }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_HASHIDS_SALT#${{ secrets.HASHIDS_SALT }}#g" "$ECOSYSTEM_FILE"

            BACKUP_FILENAME="${ECOSYSTEM_FILE}.bak"
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            TARGET_BACKUP_PATH="${BACKUP_DIR}/${ECOSYSTEM_FILE}.${TIMESTAMP}.bak"

            if [ -f "$BACKUP_FILENAME" ]; then
              echo "üëâ Moving $BACKUP_FILENAME to $TARGET_BACKUP_PATH..."
              mv "$BACKUP_FILENAME" "$TARGET_BACKUP_PATH" || { echo "Error: Failed to move backup file. Exiting."; exit 1; }
              echo "Backup moved successfully."
            else
              echo "No .bak file found to move. This might be normal if sed didn't make changes."
            fi

            echo "üëâ Prisma migrate + seed for auth-service"
            cd "$PROJECT_DIR/auth-service"
            if [ "${{ secrets.RESET_DB }}" = "true" ]; then
              echo "üîÅ Resetting and reseeding auth-service database..."
              DATABASE_URL_DEV_USERS="${{ secrets.DATABASE_URL_DEV_USERS }}" npx prisma migrate reset --force --schema prisma/schema.prisma || exit 1
            fi
            DATABASE_URL_DEV_USERS="${{ secrets.DATABASE_URL_DEV_USERS }}" npx prisma migrate deploy --schema prisma/schema.prisma || exit 1
            DATABASE_URL_DEV_USERS="${{ secrets.DATABASE_URL_DEV_USERS }}" npx prisma generate --schema prisma/schema.prisma || exit 1
            if [ "${{ secrets.RE_RUN_SEED }}" = "true" ]; then
              echo "Running seed data"
              DATABASE_URL_DEV_USERS="${{ secrets.DATABASE_URL_DEV_USERS }}" npx prisma db seed --schema prisma/schema.prisma || exit 1
            fi
            npm run build
            cd "$PROJECT_DIR"

            echo "üëâ Prisma migrate + seed for product-service"
            cd "$PROJECT_DIR/product-service"
            if [ "${{ secrets.RESET_DB }}" = "true" ]; then
              echo "üîÅ Resetting and reseeding product-service database..."
              DATABASE_URL_DEV_PRODUCT="${{ secrets.DATABASE_URL_DEV_PRODUCT }}" npx prisma migrate reset --force --schema prisma/schema.prisma || exit 1
            fi
            DATABASE_URL_DEV_PRODUCT="${{ secrets.DATABASE_URL_DEV_PRODUCT }}" npx prisma migrate deploy --schema prisma/schema.prisma || exit 1
            DATABASE_URL_DEV_PRODUCT="${{ secrets.DATABASE_URL_DEV_PRODUCT }}" npx prisma generate --schema prisma/schema.prisma || exit 1
            if [ "${{ secrets.RE_RUN_SEED }}" = "true" ]; then
              DATABASE_URL_DEV_PRODUCT="${{ secrets.DATABASE_URL_DEV_PRODUCT }}" HASHIDS_SALT=${{ secrets.HASHIDS_SALT }}
              npx prisma db seed --schema prisma/schema.prisma || exit 1
            fi
            npm run build
            cd "$PROJECT_DIR"

            echo "üëâ Start/Reload PM2 processes"
            pm2 start "$ECOSYSTEM_FILE" --update-env --env production || exit 1
