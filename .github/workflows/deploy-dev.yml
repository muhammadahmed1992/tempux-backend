name: Deploy Dev Environment

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL_AUTH: ${{ secrets.DATABASE_URL_AUTH_DEV }}
      DATABASE_URL_PRODUCT: ${{ secrets.DATABASE_URL_PRODUCT_DEV }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: SSH Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # --- Navigate to your project root on EC2 ---
            PROJECT_DIR="/home/ubuntu/tempux-backend"

            echo "ðŸ‘‰ Pull latest code"

            cd "$PROJECT_DIR" || { echo "Error: Could not change to project directory. Exiting."; exit 1; }

            git reset --hard HEAD # Discard any local changes and reset to last commit
            git clean -df       # Remove untracked files and directories
            git fetch origin
            git checkout develop
            git pull origin develop

            echo "ðŸ‘‰ Configure npm permissions for the ubuntu user"
            # Set npm's global installation directory to a user-owned path
            npm config set prefix '~/.npm-global'

            # Add this directory to the PATH environment variable for the current session
            # This ensures that globally installed executables (like tsx and nest) are found
            export PATH=~/.npm-global/bin:$PATH

            echo " Install nestjs cli globally "
            npm install -g @nestjs/cli || { echo "Error: Global npm install failed. Exiting."; exit 1; }

            export CI=true
            # --- Stop and Delete Existing PM2 Processes ---
            echo "ðŸ‘‰ Stopping and deleting existing PM2 processes..."
            # Use 'pm2 delete all' to remove all processes managed by PM2.
            # Use '|| true' to prevent script from failing if no processes are found.
            pm2 delete all || true
            echo "PM2 processes stopped/deleted."
            echo " Install centralized dependencies for all services "
            npm install
            echo "ðŸ‘‰ Install dependencies for all services"
            # Navigate into each service directory, install, then go back to root
            cd "$PROJECT_DIR/api-gateway" && npm install && npm run build|| { echo "Error: npm install failed for api-gateway. Exiting."; exit 1; }
            cd "$PROJECT_DIR/auth-service" && npm install || { echo "Error: npm install failed for auth-service. Exiting."; exit 1; }
            cd "$PROJECT_DIR/product-service" && npm install || { echo "Error: npm install failed for product-service. Exiting."; exit 1; }
            cd "$PROJECT_DIR" # Return to project root after all installs
            # --- Inject Secrets into ecosystem.config.ts ---
            echo "ðŸ‘‰ Injecting environment variables into ecosystem.config.ts"
            # Use a variable for the filename to avoid potential parsing issues
            ECOSYSTEM_FILE="ecosystem.config.js"
            BACKUP_DIR="/home/ubuntu/pm2_config_backups" # Define a dedicated backup directory outside the repo
            # Create the backup directory if it doesn't exist
            mkdir -p "$BACKUP_DIR"
            # Clean up old backups (e.g., keep only the last 5)
            echo "ðŸ‘‰ Cleaning up old PM2 config backups in $BACKUP_DIR..."
            ls -tp "$BACKUP_DIR" | grep -v '/$' | tail -n +6 | xargs -I {} rm -- "$BACKUP_DIR/{}" || true
            echo "Old backups cleaned."


            sed -i.bak "s#INJECT_JWT_SECRET#${{ secrets.JWT_SECRET }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_OTP_EXPIRY_DURATION#${{ secrets.OTP_EXPIRY_DURATION }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_HOST#${{ secrets.MAIL_HOST }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_PORT#${{ secrets.MAIL_PORT }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_USERNAME#${{ secrets.MAIL_USERNAME }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_PASSWORD#${{ secrets.MAIL_PASSWORD }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_MAIL_FROM#${{ secrets.MAIL_FROM }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_FRONTEND_URL#${{ secrets.FRONTEND_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_GOOGLE_CLIENT_ID#${{ secrets.GOOGLE_CLIENT_ID }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_GOOGLE_CLIENT_SECRET#${{ secrets.GOOGLE_CLIENT_SECRET }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_GOOGLE_CALLBACK_URL#${{ secrets.GOOGLE_CALLBACK_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_FACEBOOK_APP_ID#${{ secrets.FACEBOOK_APP_ID }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_FACEBOOK_APP_SECRET#${{ secrets.FACEBOOK_APP_SECRET }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_FACEBOOK_CALLBACK_URL#${{ secrets.FACEBOOK_CALLBACK_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_EMAIL_ENCRYPTION_KEY#${{ secrets.EMAIL_ENCRYPTION_KEY }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_SALT_ROUND#${{ secrets.SALT_ROUND }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_AUTH_PORT#${{ secrets.AUTH_PORT }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_USER_SERVICE_URL#${{ secrets.USER_SERVICE_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_AUTH_SERVICE_BASE_URL#${{ secrets.AUTH_SERVICE_BASE_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_PRODUCT_SERVICE_BASE_URL#${{ secrets.PRODUCT_SERVICE_BASE_URL }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_PRODUCT_PORT#${{ secrets.PRODUCT_PORT }}#g" "$ECOSYSTEM_FILE"
            sed -i.bak "s#INJECT_GATEWAY_PORT#${{ secrets.GATEWAY_PORT }}#g" "$ECOSYSTEM_FILE"

            # --- Move the .bak file out of the repository ---
            BACKUP_FILENAME="${ECOSYSTEM_FILE}.bak"
            TIMESTAMP=$(date +%Y%m%d%H%M%S) # Get current timestamp
            TARGET_BACKUP_PATH="${BACKUP_DIR}/${ECOSYSTEM_FILE}.${TIMESTAMP}.bak"

            if [ -f "$BACKUP_FILENAME" ]; then
              echo "ðŸ‘‰ Moving $BACKUP_FILENAME to $TARGET_BACKUP_PATH..."
              mv "$BACKUP_FILENAME" "$TARGET_BACKUP_PATH" || { echo "Error: Failed to move backup file. Exiting."; exit 1; }
              echo "Backup moved successfully."
            else
              echo "No .bak file found to move. This might be normal if sed didn't make changes."
            fi

            echo "ðŸ‘‰ Displaying ecosystem.config.ts after secret injection for debugging:"
            cat "$ECOSYSTEM_FILE" # <--- ADDED THIS LINE FOR DEBUGGING

            echo "ðŸ‘‰ Run Prisma migrate + seed for auth-service"
            cd "$PROJECT_DIR/auth-service" || { echo "Error: Could not change to auth-service directory. Exiting."; exit 1; }
            # For Prisma commands, you still need to pass the DB URL directly as an env var
            # because PM2 hasn't reloaded the ecosystem file yet for the running processes.

            DATABASE_URL_DEV_USERS="${{ secrets.DATABASE_URL_DEV_USERS }}" npx prisma migrate deploy --schema prisma/schema.prisma || { echo "Error: Prisma migrate deploy failed for auth-service. Exiting."; exit 1; }
            DATABASE_URL_DEV_USERS="${{ secrets.DATABASE_URL_DEV_USERS }}" npx prisma db seed --schema prisma/schema.prisma || { echo "Error: Prisma db seed failed for auth-service. Exiting."; exit 1; }
            npx prisma generate && npm run build
            cd "$PROJECT_DIR" # Return to project root


            echo "ðŸ‘‰ Run Prisma migrate + seed for product-service"
            cd "$PROJECT_DIR/product-service" || { echo "Error: Could not change to product-service directory. Exiting."; exit 1; }
            # For Prisma commands, you still need to pass the DB URL directly as an env var
            # because PM2 hasn't reloaded the ecosystem file yet for the running processes.
            DATABASE_URL_DEV_PRODUCT="${{ secrets.DATABASE_URL_DEV_PRODUCT }}" npx prisma migrate deploy --schema prisma/schema.prisma || { echo "Error: Prisma migrate deploy failed for auth-service. Exiting."; exit 1; }
            DATABASE_URL_DEV_PRODUCT="${{ secrets.DATABASE_URL_DEV_PRODUCT }}" npx prisma db seed --schema prisma/schema.prisma || { echo "Error: Prisma db seed failed for auth-service. Exiting."; exit 1; }
            npx prisma generate && npm run build
            cd "$PROJECT_DIR" # Return to project root

            echo "path before running pm2 start $PROJECT_DIR "
            echo "ðŸ‘‰ Start/Reload PM2 processes" # Changed message
            # Use 'pm2 start' which handles both initial start and updates/reloads.
            # '--update-env' ensures new environment variables from sed are picked up.
            pm2 start $ECOSYSTEM_FILE --update-env || { echo "Error: PM2 start/reload failed. Exiting."; exit 1; }
